// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	doctors "Hospital-Management-System/business/doctors"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AllDoctor provides a mock function with given fields:
func (_m *Repository) AllDoctor() ([]doctors.Domain, error) {
	ret := _m.Called()

	var r0 []doctors.Domain
	if rf, ok := ret.Get(0).(func() []doctors.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]doctors.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id int) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoctorByID provides a mock function with given fields: id
func (_m *Repository) DoctorByID(id int) (doctors.Domain, error) {
	ret := _m.Called(id)

	var r0 doctors.Domain
	if rf, ok := ret.Get(0).(func(int) doctors.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(doctors.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: username, password
func (_m *Repository) Login(username string, password string) (doctors.Domain, error) {
	ret := _m.Called(username, password)

	var r0 doctors.Domain
	if rf, ok := ret.Get(0).(func(string, string) doctors.Domain); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(doctors.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: domain
func (_m *Repository) Register(domain *doctors.Domain) (doctors.Domain, error) {
	ret := _m.Called(domain)

	var r0 doctors.Domain
	if rf, ok := ret.Get(0).(func(*doctors.Domain) doctors.Domain); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(doctors.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*doctors.Domain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: docID, domain
func (_m *Repository) Update(docID int, domain *doctors.Domain) (doctors.Domain, error) {
	ret := _m.Called(docID, domain)

	var r0 doctors.Domain
	if rf, ok := ret.Get(0).(func(int, *doctors.Domain) doctors.Domain); ok {
		r0 = rf(docID, domain)
	} else {
		r0 = ret.Get(0).(doctors.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *doctors.Domain) error); ok {
		r1 = rf(docID, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
